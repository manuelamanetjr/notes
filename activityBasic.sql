3.
SELECT COUNT (*) FROM INVOICE;

4.
SELECT COUNT (*) FROM CUSTOMER
WHERE CUS_BALANCE > 500;

5. 
SELECT CUSTOMER.CUS_CODE, INVOICE.INV_NUMBER, INVOICE.INV_DATE, PRODUCT.P_DESCRIPT, LINE.LINE_UNITS, LINE.LINE_PRICE
FROM CUSTOMER, INVOICE, PRODUCT,LINE
WHERE CUSTOMER.CUS_CODE = INVOICE.CUS_CODE AND LINE.INV_NUMBER = INVOICE.INV_NUMBER AND LINE.P_CODE = PRODUCT.P_CODE
ORDER BY CUSTOMER.CUS_CODE, INVOICE.INV_NUMBER, PRODUCT.P_DESCRIPT;

6.
SELECT CUSTOMER.CUS_CODE, INVOICE.INV_NUMBER, PRODUCT.P_DESCRIPT, LINE.LINE_UNITS AS "Units Bought", LINE.LINE_PRICE AS "Unit Price", LINE.LINE_PRICE * LINE.LINE_UNITS AS "Subtotal"
FROM CUSTOMER, INVOICE, PRODUCT,LINE
WHERE CUSTOMER.CUS_CODE = INVOICE.CUS_CODE AND LINE.INV_NUMBER = INVOICE.INV_NUMBER AND LINE.P_CODE = PRODUCT.P_CODE
ORDER BY CUSTOMER.CUS_CODE, INVOICE.INV_NUMBER, PRODUCT.P_DESCRIPT;

7. 
SELECT CUSTOMER.CUS_CODE, CUSTOMER.CUS_BALANCE, SUM(LINE.LINE_UNITS*LINE.LINE_PRICE) AS "Total Purchases" 
FROM  CUSTOMER, INVOICE, LINE 
WHERE  INVOICE.INV_NUMBER = LINE.INV_NUMBER AND  CUSTOMER.CUS_CODE = INVOICE.CUS_CODE
GROUP BY  CUSTOMER.CUS_CODE
ORDER BY CUSTOMER.CUS_CODE;

8. 
SELECT  INVOICE.CUS_CODE, CUSTOMER.CUS_BALANCE, SUM(LINE.LINE_UNITS*LINE.LINE_PRICE) AS "Total Purchases", Count(*) AS "Number of Purchases"
FROM  CUSTOMER, INVOICE, LINE
WHERE  INVOICE.INV_NUMBER = LINE.INV_NUMBER AND  CUSTOMER.CUS_CODE = INVOICE.CUS_CODE
GROUP BY  INVOICE.CUS_CODE, CUSTOMER.CUS_BALANCE
ORDER BY INVOICE.CUS_CODE;

9. 
SELECT  customer.cus_code, CUSTOMER.CUS_BALANCE, SUM(LINE.LINE_UNITS*LINE.LINE_PRICE) AS "Total Purchases", Count(*) AS "Number of Purchases", AVG(LINE.LINE_UNITS*LINE.LINE_PRICE) AS "Average Purchase Amount" 
FROM  CUSTOMER, INVOICE, LINE 
WHERE  INVOICE.INV_NUMBER = LINE.INV_NUMBER AND  CUSTOMER.CUS_CODE = INVOICE.CUS_CODE
GROUP BY  customer.cus_code
ORDER BY customer.cus_code, 

10.
SELECT INV_NUMBER, SUM(LINE_UNITS*LINE_PRICE) AS "Invoice Total"
FROM  LINE
GROUP BY INV_NUMBER
ORDER BY INV_NUMBER;

11. 
SELECT CUS_CODE, LINE.INV_NUMBER, SUM(LINE.LINE_UNITS*LINE.LINE_PRICE) AS "Invoice Total"
FROM INVOICE, LINE
WHERE INVOICE.INV_NUMBER = LINE.INV_NUMBER 
GROUP BY  CUS_CODE, LINE.INV_NUMBER
ORDER BY CUS_CODE;

12. 
SELECT CUS_CODE, COUNT (DISTINCT LINE.INV_NUMBER) AS "Number of Invoices", SUM(LINE.LINE_UNITS*LINE.LINE_PRICE) AS "Total Customer Purchases"
FROM INVOICE, LINE
WHERE INVOICE.INV_NUMBER = LINE.INV_NUMBER 
GROUP BY  CUS_CODE
ORDER BY CUS_CODE;

13.

14.
SELECT DISTINCT INVOICE.CUS_CODE, CUSTOMER.CUS_BALANCE
FROM CUSTOMER, INVOICE
WHERE CUSTOMER.CUS_CODE = INVOICE.CUS_CODE
ORDER BY CUS_CODE;

15. 
SELECT  MIN(CUS_BALANCE) AS "Minimum Balance", MAX(CUS_BALANCE) AS "Maximum Balance", AVG(CUS_BALANCE) AS "Average Balance" 
FROM  CUSTOMER
WHERE   CUS_CODE IN (SELECT CUS_CODE FROM INVOICE);  

16. 
SELECT Sum(CUS_BALANCE) AS "Total Balance", Min(CUS_BALANCE) AS "Minimum Balance", Max(CUS_BALANCE) AS "Maximum Balance", Avg(CUS_BALANCE) AS "Average Balance" 
FROM  CUSTOMER;

17. 
SELECT  CUS_CODE, CUS_BALANCE
FROM CUSTOMER
WHERE CUSTOMER.CUS_CODE NOT IN (SELECT DISTINCT CUS_CODE FROM INVOICE);

18. 
SELECT SUM(CUS_BALANCE) AS "Total Balance", MIN(CUS_BALANCE) AS "Minimum Balance", MAX(CUS_BALANCE) AS "Maximum Balance", AVG(CUS_BALANCE) AS "Average Balance" 
FROM CUSTOMER
WHERE CUS_CODE NOT IN (SELECT CUS_CODE FROM INVOICE);

19. 
SELECT P_DESCRIPT, P_QOH, P_PRICE, P_QOH*P_PRICE AS Subtotal 
FROM  PRODUCT
ORDER BY SUBTOTAL DESC;

20. 
SELECT SUM(P_QOH*P_PRICE) AS "Total Value of Inventory"
FROM  PRODUCT;


3.
SELECT DISTINCT BOOK_YEAR
FROM BOOK
ORDER BY BOOK_YEAR;

4. 
SELECT CHECK_NUM, BOOK_NUM, PAT_ID, CHECK_OUT_DATE, CHECK_DUE_DATE FROM CHECKOUT 
ORDER BY CHECK_OUT_DATE DESC, BOOK_NUM DESC LIMIT 10;

5. 
SELECT BOOK SUBJECT, COUNT(BOOK_SUBJECT) AS "BOOKS IN SUBJECT" 
FROM BOOK 
GROUP BY BOOK_SUBJECT
ORDER BY "BOOKS IN SUBJECT" DESC;

6.
SELECT AU_ID, COUNT (BOOK_NUM) AS "BOOK WRITTEN" 
FROM WRITES 
GROUP BY AU_ID ORDER BY "BOOK WRITTEN" DESC, AU_ID;

7. 
SELECT CHECK_NUM, BOOK_NUM, CHECK_OUT_DATE 
FROM CHECKOUT 
WHERE CHECK_OUT_DATE < '2015-04-05'
ORDER BY CHECK_NUM;

8. 
SELECT BOOK_NUM, BOOK_TITLE, BOOK_YEAR 
FROM BOOK 
WHERE BOOK_YEAR 2013 AND BOOK_SUBJECT = 'Programming'
ORDER BY BOOK_NUM;

9. 
\c postgres
DROP DATABASE EXAM2;







